INHERIT += "report-error"
DISTRO = "poky"
PACKAGE_CLASSES = "package_ipk"
BB_NUMBER_THREADS = "${@bb.utils.cpu_count()}"
PARALLEL_MAKE = "-j ${@bb.utils.cpu_count()}"
SDKMACHINE ?= "x86_64"
IMAGE_FSTYPES_append = "  tar.gz"
BB_TASK_NICE_LEVEL = "5"
BB_TASK_NICE_LEVEL_task-testimage = "0"
BB_TASK_IONICE_LEVEL = "2.7"
BB_TASK_IONICE_LEVEL_task-testimage = "2.1"
DL_DIR = "/tmp/yocto-autobuilder/downloads"
SSTATE_DIR ?= "/tmp/yocto-autobuilder/sstate/" 
MACHINE = "beagle-bone-black"
PREMIRRORS = ""
ERROR_QA_remove = "version-going-backwards"
PRSERV_HOST = "localhost:0:0"
ADTREPO = "http://adtrepo.yoctoproject.org//2.6"
QEMU_USE_KVM = "True"

PRSERV_HOST = "localhost:0"
INHERIT += "own-mirrors"
SOURCE_MIRROR_URL = "http://mirror/source_mirror_thud"
SSTATE_MIRRORS ?= "file://.* http://mirror/sstate_mirror_thud/PATH;downloadfilename=PATH"

# no grub/uefi:
MENDER_FEATURES_ENABLE_append = " mender-uboot mender-image-sd"
MENDER_FEATURES_DISABLE_append = " mender-grub mender-image-uefi"

# set the serial console(s) passed from U-Boot to kernel commandline:
MENDER_UBOOT_PRE_SETUP_COMMANDS = "console_bootargs=console=\$\{console}; setenv bootargs \$\{console_bootargs} \$\{bootargs}"

# don't use vfat partition for MLO
MENDER_IMAGE_BOOTLOADER_FILE = "MLO"
# this sets the offset where the bootloader should be placed, 
# .counting from the start of the storage medium. 
# The offset is specified in units of 512-byte sectors. 
# Obviously this needs to be non-zero, or the partition table itself would be overwritten.
# something like this should work:
# sudo dd if=./u-boot/MLO of=${DISK} count=1 seek=1 bs=128k
# -- bs=BYTES
#              read and write up to BYTES bytes at a time (default: 512);
#              overrides ibs and obs
#    
#    K =1024
#
#       count=N
#              copy only N input blocks
#
#       seek=N skip N obs-sized blocks at start of output
#
#    seek defines the offset, so I would say
#    start at 128 KBytes (128*1024)
# we want an offset of 128K (0x20000) -> 0x20000 / 0x200 = 0x100 i.e. 256
MENDER_IMAGE_BOOTLOADER_BOOTSECTOR_OFFSET = "256"

# don't use vfat partition for u-boot.img
MENDER_IMAGE_SECOND_BOOTLOADER_FILE = "u-boot.img"
# something like this should work:
# sudo dd if=./u-boot/u-boot.img of=${DISK} count=2 seek=1 bs=384k
# # -- bs=BYTES
#              read and write up to BYTES bytes at a time (default: 512);
#              overrides ibs and obs
#    
#    K =1024
# 
#       count=N
#              copy only N input blocks
#
#       seek=N skip N obs-sized blocks at start of output
#
#    seek defines the offset, so I would say
#    start at 384 KBytes (384*1024) 
# we want an offset of 384K (0x60000) -> 0x60000 / 0x200 = 0x300 i.e. 768
MENDER_IMAGE_SECOND_BOOTLOADER_BOOTSECTOR_OFFSET = "768"

# files which should not be in vfat /uboot partition
MENDER_IMAGE_BOOT_FILES_REMOVE="${IMAGE_BOOT_FILES}"
